openapi: 3.0.0
info:
  title: AtmoSphere Service Products API
  version: 1.0.0
paths:
  /search:
    get:
      operationId: getProducts
      summary: Get all products limited to latest 20 products.
      description: Searches based on product titles or descriptions.
      parameters:
        - name: page
          in: query
          description: Page number starting from 0 by default.
          required: false
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          description: Number of products per page.
          required: false
          schema:
            type: integer
            default: 20
        - name: sortBy
          in: query
          description: Sorting criteria with for 'price', 'name', 'category'.
          required: false
          schema:
            type: string
            default: price
        - name: sortOrder
          in: query
          description: Use either of [ ASC | DESC ].
          required: false
          schema:
            type: string
            default: ASC
        - name: search
          in: query
          description: Search criteria that searches product name and description.
          required: false
          schema:
            type: string
            default: ''
      responses:
        '200':
          description: The list of products.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pagination'
  /search/{id}:
    get:
      operationId: getProductById
      summary: Get a product by id.
      description: Searches based on product id.
      parameters:
        - name: id
          in: path
          description: Product id.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The product.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product not found.
          content: {}
  /filter/category:
    get:
      operationId: filterProductsByCategory
      summary: Filter products by category.
      description: Filter based on product category.
      parameters:
        - name: category
          in: query
          description: Category
          required: true
          schema:
            type: string
        - name: page
          in: query
          description: Page number starting from 0 by default.
          required: false
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          description: Number of products per page.
          required: false
          schema:
            type: integer
            default: 20
        - name: sortBy
          in: query
          description: Sorting criteria with for 'price', 'name', 'category'.
          required: false
          schema:
            type: string
            default: price
        - name: sortOrder
          in: query
          description: Use either of [ ASC | DESC ].
          required: false
          schema:
            type: string
            default: ASC
      responses:
        '200':
          description: The list of products.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pagination'
  /filter/condition:
    get:
      operationId: filterProductsByCondition
      summary: Filter products by condition.
      description: Filter based on product condition.
      parameters:
        - name: condition
          in: query
          description: Condition
          required: true
          schema:
            type: string
        - name: page
          in: query
          description: Page number starting from 0 by default.
          required: false
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          description: Number of products per page.
          required: false
          schema:
            type: integer
            default: 20
        - name: sortBy
          in: query
          description: Sorting criteria with for 'price', 'name', 'category'.
          required: false
          schema:
            type: string
            default: price
        - name: sortOrder
          in: query
          description: Use either of [ ASC | DESC ].
          required: false
          schema:
            type: string
            default: ASC
      responses:
        '200':
          description: The list of products.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pagination'
  /filter/pricerange:
    get:
      operationId: filterProductsByPriceRange
      summary: Filter products by price range.
      description: Filter based on product price range.
      parameters:
        - name: fromPrice
          in: query
          description: From price
          required: true
          schema:
            type: number
        - name: toPrice
          in: query
          description: To price
          required: true
          schema:
            type: number
        - name: page
          in: query
          description: Page number starting from 0 by default.
          required: false
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          description: Number of products per page.
          required: false
          schema:
            type: integer
            default: 20
        - name: sortBy
          in: query
          description: Sorting criteria with for 'price', 'name', 'category'.
          required: false
          schema:
            type: string
            default: price
        - name: sortOrder
          in: query
          description: Use either of [ ASC | DESC ].
          required: false
          schema:
            type: string
            default: ASC
      responses:
        '200':
          description: The list of products.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pagination'
  /filter/and:
    get:
      operationId: filterProducts
      summary: Filter products by various criteria.
      description: Filter based on product category, condition, and price range as AND criteria.
      parameters:
        - name: category
          in: query
          description: Category
          required: true
          schema:
            type: string
        - name: condition
          in: query
          description: Condition
          required: true
          schema:
            type: string
        - name: fromPrice
          in: query
          description: From price
          required: true
          schema:
            type: number
        - name: toPrice
          in: query
          description: To price
          required: true
          schema:
            type: number
        - name: page
          in: query
          description: Page number starting from 0 by default.
          required: false
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          description: Number of products per page.
          required: false
          schema:
            type: integer
            default: 20
        - name: sortBy
          in: query
          description: Sorting criteria with for 'price', 'name', 'category'.
          required: false
          schema:
            type: string
            default: price
        - name: sortOrder
          in: query
          description: Use either of [ ASC | DESC ].
          required: false
          schema:
            type: string
            default: ASC
      responses:
        '200':
          description: The list of products.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pagination'
components:
  schemas:
    Pagination:
      type: object
      properties:
        content:
          type: object # Pagination<T>
        totalPages:
          type: integer
        totalElements:
          type: integer
          format: int64
        pageSize:
          type: integer
        pageNumber:
          type: integer
        sortBy:
          type: string
        sortOrder:
          type: string # "ASC" | "DESC"
    Product:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        price:
          type: number
          format: float
        image:
          type: string
        category:
          $ref: '#/components/schemas/Category'
        condition:
          $ref: '#/components/schemas/Condition'
    Category:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
    Condition:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
