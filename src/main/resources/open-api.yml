openapi: 3.0.0
info:
  title: AtmoSphere Service Products API
  version: 1.0.0
servers:
  - url: https://integ.dynv6.net/atmosphere-service-products/api
paths:
  /items:
    get:
      operationId: getItems
      summary: Get all items limited to latest 20 items.
      description: Searches based on item titles or descriptions.
      parameters:
        - name: term
          in: query
          description: Search term that considers item name and description.
          required: false
          schema:
            type: string
        - name: fromPrice
          in: query
          description: Minimum price.
          required: false
          schema:
            type: string
        - name: toPrice
          in: query
          description: Maximum price.
          required: false
          schema:
            type: string
        - name: category
          in: query
          description: Category to filter by.
          required: false
          schema:
            type: string
        - name: condition
          in: query
          description: Condition to filter by.
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: Page number starting from 0 by default.
          required: false
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          description: Number of items per page.
          required: false
          schema:
            type: integer
            default: 20
        - name: sortBy
          in: query
          description: Sorting criteria with for 'price', 'name', 'category'.
          required: false
          schema:
            type: string
            default: price
        - name: sortOrder
          in: query
          description: Use either of [ ASC | DESC ].
          required: false
          schema:
            type: string
            default: ASC
      responses:
        '200':
          description: The list of items.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pagination'
    post:
      operationId: createItem
      summary: Create a new item
      description: Create a new item with the given data.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
      responses:
        '201':
          description: Item created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostResponse'
        '400':
          description: Invalid item
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostResponse'
  /items/{id}:
    get:
      operationId: getItemById
      summary: Get a item by id.
      description: Searches based on item id.
      parameters:
        - name: id
          in: path
          description: Product id.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The item.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        '404':
          description: Product not found.
          content: {}
components:
  schemas:
    Pagination:
      type: object
      properties:
        content:
          type: object # Pagination<T>
        totalPages:
          type: integer
        totalElements:
          type: integer
          format: int64
        pageSize:
          type: integer
        pageNumber:
          type: integer
        sortBy:
          type: string
        sortOrder:
          type: string # "ASC" | "DESC"
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
    Product:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        price:
          type: number
          format: float
        image:
          type: string
        category:
          $ref: '#/components/schemas/Category'
        condition:
          $ref: '#/components/schemas/Condition'
    Item:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        price:
          type: number
          format: float
        image:
          type: string
        category:
          $ref: '#/components/schemas/Category'
        condition:
          $ref: '#/components/schemas/Condition'
    Category:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
    Condition:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string

    PostResponse:
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
    Error:
      type: object
      properties:
        message:
          type: string
